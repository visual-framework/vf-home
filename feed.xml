<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to the Visual Framework 2.0</title>
  <subtitle>A front-end toolkit to quickly build better life science websites</subtitle>
  <link href="https://visual-framework.github.io/vf-welcome/feed.xml" rel="self"/>
  <link href="https://visual-framework.github.io/vf-welcome/"/>
  <updated>2019-04-09T12:24:50+00:00</updated>
  <id>https://visual-framework.github.io/vf-welcome</id>
  <author>
    <name>Visual Framework system</name>
    <email>ken.hawkins@embl.de</email>
  </author>
  
  <entry>
    <title>Creating a new component</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/components/creating-new-components/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/components/creating-new-components/</id>
    <content type="html">
This codebase includes a folder and file creation tool. It allows you to quickly create all the required files to make a component. It gives you the option to create am element, block, or container.

1. Install Yeoman
   - If you&#39;ve come this far and you don&#39;t have `yo`, you should be able to install it with `yarn global add yo@latest`
   - If you get stuck, [see the official install guide](http://yeoman.io/codelab/setup.html)
1. Create a new component
   - Run `gulp vf-component` and answer the questions when prompted.
       - **Type of component:** We use a variation of the atomic design methodology, [read about the differences here](http://bradfrost.com/blog/post/atomic-web-design/#atoms). We use: elements, blocks, and containers.
           - an element would be a heading, or a button
           - a block would be a teaser, or a search form
           - a container would be a group of teasers
       - **Name of component:** Go for something simple and obvious (todo: we need a guide/documentation on how we name things). Don&#39;t worry about namespacing and prefixing, the tooling will take care of this.
       - **NPM package:** If you&#39;re making something interesting (probably not an &#39;element&#39;), then saying &#39;yes&#39; will allow the component to be shared as an optional part of the framework on NPM.
    - Your customised template component will is in the `/components` directory.
1. Add the `@import &#39;vf-your-component.scss&#39;;` to `/assets/scss/styles.scss`.
1. Developing your component
   - Edit your template files in the `/components/your-component-name` folder
       - For further guidance on component configuration, [consult the comments in the component template files](https://github.com/visual-framework/vf-core/tree/develop/tools/component-generator/templates).
   - Run `gulp vf-dev` to compile and preview the component
1. Sharing you component back
   - Publish it to npm; and/or
   - If you think your component is useful to the global `vf-core` community, [make a Pull Request](https://github.com/visual-framework/vf-core/pulls) or [open an issue](https://github.com/visual-framework/vf-core/issues/new/choose) to discuss.

 &lt;div class=&quot;vf-box&quot;&gt;
 Tip: also consult the [guidelines](/vf-welcome/documentation/guidelines) for the naming of things and coding standards.
 &lt;/div&gt;

 ## Language and spelling of documentation, code

 The `vf-core` project is being led by EMBL where British English and we&#39;re aware that most code is American English (`colour` vs `color`); so:

 - üìöüá¨üáß Documentation is written in British English üíÇ‚Äç `Rarely use centred text, always use colours`
 - ‚å®Ô∏èüá∫üá∏ Code is written in American english üß¢ `$vf-main-color: green;`
</content>
  </entry>
  
  <entry>
    <title>Deprecating components</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/components/deprecating-components/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/components/deprecating-components/</id>
    <content type="html">
Inevitably code will be replaced and improved, leaving components stale and or outdated. So we should tell developers to not use them, here&#39;s how.

Here&#39;s what we need to make sure we do:

1. Developers can avoid installing and outdated componetn;
1. Developers can know to stop using a componetn; and
1. Components aren&#39;t removed so existing sites continue to function.

## How to deprecate an entire component

1. In the `component-name.config.yml` file add:
    - `status: deprecated`
    - `component-type: deprecated`
    - `hidden: true`
1. In the `component-name.scss` file wrap the sass with:
    - `html:not(.vf-disable-deprecated) {`
1. Update `README.md` with:
    - why the component has been deprecated
    - what component(s) developers should instead use
    - Use this template: `&lt;h2&gt;This component has been &lt;span style=&quot;color: rgb(228, 0, 70);&quot;&gt;deprecated&lt;/span&gt;. Please use the &lt;a class=&quot;vf-link&quot; href=&quot;#&quot; new&lt;=&quot;&quot; a=&quot;&quot;&gt; component.&lt;/a&gt;&lt;/h2&gt; in the README.md file.`
1. Publish on NPM:
    - follow the guidelines to update the packages using Lerna(TODO). This would be a major release for the deprecated component, decide on other pattern version numbers as described in the documentation for publishing(TODO).
1. Remove the component from `vf-core`
1. Deprecate on npm:
    - `npm deprecate @visual-framework/component &quot;no longer supported use the @visual-framework/component instead&quot;`

## Need to deprecate just one variant of a component?

1. Add a note to the `--variant.njk`
    - Use this template: `&lt;h2&gt;This variant has been &lt;span style=&quot;color: rgb(228, 0, 70);&quot;&gt;deprecated&lt;/span&gt;. Please use the &lt;a class=&quot;vf-link&quot; href=&quot;#&quot; new&lt;=&quot;&quot; a=&quot;&quot;&gt; component.&lt;/a&gt;&lt;/h2&gt; in the README.md file.`
1. Wrap the relevant Sass in `html:not(.vf-disable-deprecated) {`
1. Hide the variant tab in `.config.yml`:
```
variants:
  - name: deprecated-variant
    hidden: true
```

See also: [example `vf-deprecated` component](https://github.com/visual-framework/vf-core/tree/develop/components/vf-deprecated)
</content>
  </entry>
  
  <entry>
    <title>Updating, versioning a component</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/components/updating-a-component/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/components/updating-a-component/</id>
    <content type="html">
Like the Visual Framework 2.0, components follow [semantic versioning](https://semver.org/) by increasing their full version number every time they have breaking changes.

However the version number of components its not tied to the version number of the Visual Framework&#39;s `vf-core`; that is:

- `vf-core‚Äã@2.1.2` might use `vf-button‚Äã@1.0.1` and `vf-component-x‚Äã@8.2.1`
- `vf-button@1.0.1` might require `vf-link@3.0.1` or newer

As such components should specify if they only support specific versions of `vf-core` or require other specific versions of patterns.

Other notes and tips on components:

- should use a [semantic versioning](https://semver.org/) style of releases
- must work with `vf-core v2.x`, but a component may specify a
minimum required minor version of vf-core
- may indicate any required versions of peer-components in your component&#39;s README.md.
    - `vf-component-x`@`2.1.2` requires `vf-component-y`@`^8.1.0`
- can live as part of the `vf-core` [monorepo](https://gomonorepo.org/)
    - Interested in adding a component? [Get in touch](https://discord.gg/XHAvkUX) or [make an issue](https://github.com/visual-framework/vf-core/issues/new/choose)
- read more about [component versioning in this issue](https://github.com/visual-framework/vf-core/issues/119)

&lt;span class=&quot;vf-badge vf-badge--tertiary&quot;&gt;Related&lt;/span&gt; [Notes on VF versioning](/vf-welcome/documentation/guidelines/versioning).
</content>
  </entry>
  
  <entry>
    <title>Code of conduct</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/getting-started/code-of-conduct/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/getting-started/code-of-conduct/</id>
    <content type="html">
We don&#39;t yet have a full policy but, in general: be nice, respectful
and considerate. The maintainers will do the same.
</content>
  </entry>
  
  <entry>
    <title>Naming things</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/getting-started/naming/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/getting-started/naming/</id>
    <content type="html">
&lt;p class=&quot;vf-lede&quot;&gt;The Visual Framework uses a dual approach for the naming of things.&lt;/p&gt;

At the lower level there are **components** which are a type of &quot;ingredient&quot; used
to assembl into the higher level **patterns** that are richer templates with
usability guidance.

## Type 1: Components

Components are intended for re-use and should be named for what they are; that is:

- vf-box (not &quot;vf-introduction&quot;)
- [vf-button](/components/detail/vf-button--sizes) (not &quot;vf-call-to-action&quot;)
- vf-grid (not &quot;vf-wide-layout&quot;)
- vf-header (not &quot;vf-big-headline&quot;)
- vf-form

Why? This ensures that that a box will always be rectangular-ish pattern on pages,
whereas an &quot;introduction&quot; may be a box today, but become simply large text after a redesign.

### Components have

- Lots of code
    - Generally that CSS/Sass and some JS
- An HTML code template (Nunjucks)
- Documentation on how to use

## Type 2: Patterns

If your pattern is primarily intended to be used for particular websites or a brand,
give it a name that is attached to the role it performs; that is:

- vf-group-masthead
- vf-registration-form
- vf-start-page

Why? Naming for the role the pattern does allows us to change the future visual structure,
so a &quot;display headline&quot; today may have a black background, but tomorrow might have no background
and be large and italic text.

### Patterns have

- Lots of code
    - Generally that CSS/Sass and some JS
- An HTML code template (Nunjucks)
- Documentation on how to use


For further guidance on the distinctions, see: [Patterns ‚â† Components](https://medium.com/eightshapes-llc/patterns-components-2ce778cbe4e8)
and UK.gov&#39;s information on [patterns](https://design-system.service.gov.uk/patterns) vs [components](https://design-system.service.gov.uk/components).
</content>
  </entry>
  
  <entry>
    <title>Making your first Pull Request</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/getting-started/pull-requests/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/getting-started/pull-requests/</id>
    <content type="html">
To contribute code back, you&#39;ll need to make a PR ([Pull Request](https://help.github.com/en/articles/about-pull-requests)),
as you won&#39;t have write access, GitHub will prompt you to fork the `vf-core` repository
and then you&#39;ll be able to push your branch and open a pull request.

## What?

If you&#39;re thoroughly confused, here are a few helpful links:

- [About branches](https://help.github.com/en/articles/about-branches)
- [Making a fork and pull request](https://www.youtube.com/watch?v=rgbCcBNZcdQ) (video)


## Branch naming conventions

In general `type/brief-description-of-branch`, example: `component/advanced-search`,
or `fix/grid-breaks-on-ios`

Here are the most common `type`s:

- `components/` when developing a new component;
- `feature/` to be used when working on something that affects the whole system;
- `fix/` to be used for ... fixes;
- `hot-fix/` something very specific and usually urgent; and
- `docs/` for anything to do with documentation, content or code.

## Automated testing

### On push

When you push your branch to GitHub, [Husky](https://github.com/typicode/husky#husky)
will run a pre-commit hook to help enforce Sass linting and ensure the code
builds.

### Visual differences

To be confident that we can ammend components code if needed without breaking anything we need to test against the agreed look and interaction(s) of a component.

We are making use of [Percy](https://percy.io/EMBL/EMBL-Visual-Framework) to do this, comparisons will be automatically generated before a pull request for a component is accepted.
</content>
  </entry>
  
  <entry>
    <title>Setting up your development environment</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/getting-started/setting-up/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/getting-started/setting-up/</id>
    <content type="html">
To develop the Visual Framework your will need some software.

## Development environment

If you don&#39;t already have a code editor and are new to git, a good starting point is to:

1. [Setup a GitHub.com account](https://github.com/join)
1. Install the [GitHub Desktop git client](https://desktop.github.com/)
1. For editing code, [install Atom](https://atom.io/)

## Development tools

First, see if you have the needed tools installed.

1. Open a command line/terminal
1. Enter `node -v`
1. Enter `gulp -v`
1. Enter `yarn -v`

If any of those steps return an error you need to install the corresponding
software.

- To install Node: go to the official [downloads page](https://nodejs.org/download/)
- To install Gulp: Gulp requires Node and can be installed by: `yarn global add gulpjs/gulp-cli`
- To install Yarn: Yarn require Node, [follow the install guide](https://yarnpkg.com/lang/en/docs/install/)

## Installing the Visual Framework

You only need to clone `vf-core` if you wish to make a pull request to create, amend or delete core components,
or modify the way Sass, JS or other assets are compiled.

Here&#39;s how:

1. Clone `vf-core`
    - `git clone https://github.com/visual-framework/vf-core.git`
1. Move to the directory
    - `cd visual-framework-tooling-prototype`
1. You probably want the develop branch (or [your new feature branch](/vf-welcome/documentation/getting-started/naming))
    - `git checkout develop`
1. Install [fractal](https://github.com/frctl/fractal) You might need to use `sudo`.
    - `yarn global add @frctl/fractal`
1. Download all the things
    - `yarn install`
1. Run a dev build and open in your browser
    - `gulp vf-dev`

### Developing on Windows?

The Visual Framework is primairly developed on Mac and Linux environments, but it is
also intended to be Windows compatible.

We test and support Windows 10 using [`scoop`](https://scoop.sh/).
</content>
  </entry>
  
  <entry>
    <title>Structure of the Visual Framework</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/getting-started/structure/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/getting-started/structure/</id>
    <content type="html">
## Design decisions and tokens

The Visual Framework uses the [Design Token concept](https://medium.com/eightshapes-llc/tokens-in-design-systems-25dd82d58421) to specify design (colour, spacing, type) as reusable JSON or YAML that are translated from `.yml` data into `.scss` using [Theo](https://github.com/salesforce-ux/theo#-theo).

This Design Token abstraction [helps portability and integration](https://uxdesign.cc/design-tokens-for-dummies-8acebf010d71) with other technical systems.

You can find the Design Tokens in `components/vf-design-tokens`.

## File structure



The `vf-core` repo contains three types of files:

1. Components that are located in `./components`
2. Build scripts located in the root of the project (mainly)
3. The web interface `./tools/vf-frctl-theme`


## Detailed overview

&lt;div class=&quot;vf-box&quot;&gt;

&lt;pre&gt;
    ‚îú‚îÄ‚îÄ .editorconfig
    ‚îú‚îÄ‚îÄ CHANGELOG.md
    ‚îú‚îÄ‚îÄ CONTRIBUTING.md
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ components  (all the components you wish to use)
    ‚îÇ   ‚îú‚îÄ‚îÄ _previews (templates for the web component browser)
    ‚îÇ   ‚îú‚îÄ‚îÄ vf-activity-group
    |   |   ...
    ‚îÇ   ‚îî‚îÄ‚îÄ vf-video-teaser
    ‚îú‚îÄ‚îÄ docs (documentation files for the web interface)
    ‚îú‚îÄ‚îÄ fractal.js (configuration for the web component library)
    ‚îú‚îÄ‚îÄ gulpfile.js
    ‚îú‚îÄ‚îÄ lerna.json
    ‚îú‚îÄ‚îÄ package.json
    ‚îú‚îÄ‚îÄ public (dynamic folder used for rendering of global CSS, JS, component assets)
    ‚îî‚îÄ‚îÄ tools
        ‚îú‚îÄ‚îÄ component-generator (make new components)
        ‚îú‚îÄ‚îÄ css-generator (build requirement)
        ‚îî‚îÄ‚îÄ vf-frctl-theme (web interface)
&lt;/pre&gt;

&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Sass and CSS guidelines</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/guidelines/css/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/guidelines/css/</id>
    <content type="html">
## CSS Naming conventions

Components in the Visual Framework follow the BEM naming convention.

```scss
.component {

}

.component__item {

}

.component--alternative {

}
```

## Namespacing

We namespace all universal components with a prefix of `vf-`. This ensures that the component will not break an existing codebase.

```css
.vf-component {

}
```

This allows the Visual Framework to also include team specific components that are owned by those teams.

```css
.embl-grid {

}
```

## Design Patterns and Components

The Visual Framework makes use of Atomic Design-style concepts to define components. Instead of using Atoms, Molecules, Organisms the Visual Framework uses the terms Elements, Blocks, and Containers.

In code we do not include further prefixes for the Visual Frameworks version of Atomic Design. Instead we rely on other components to help determine what is an Element, a Block, or a Container.

### Elements

An Element: headings, lists, buttons, dividers, links, etc. are named after what they are semantically.

```css
.vf-heading {

}
.vf-heading--xl {

}
```

### Blocks

A Block: headers, lists, etc. are a single purpose design component that is also named after what it does or where it would go as part of a document structure. It makes use of Elements in the HTML where needed.

```css
.vf-breadcrumbs {

}
.vf-page-header {

}
```

In the HTML the Visual Framework makes use of `|` to separate Element classes from Block classes

```html
&lt;header class=&quot;vf-page-header&quot;&gt;
  &lt;h1 class=&quot;vf-page-header__heading | vf-heading vf-heading--l&quot;&gt;Strategy &amp;amp Communications&lt;/h1&gt;
  &lt;span class=&quot;vf-page-header__sub-heading | vf-heading vf-heading--r&quot;&gt;Blog&lt;/span&gt;
&lt;/header&gt;
```

### Mixes

When creating components you may find that a block you are wanting to use needs specific styling within it&#39;s parent. To do this we make use of BEM&#39;s mixes. Where not only do you include the relevant classnames for the block but add an additional class that includes the parent classname.

For example, the page header has two text nodes:

```html
&lt;header class=&quot;vf-page-header&quot;&gt;
  &lt;h1 class=&quot;vf-page-header__heading | vf-text vf-text--heading-l&quot;&gt;Strategy &amp;amp Communications&lt;/h1&gt;
  &lt;span class=&quot;vf-page-header__sub-heading  | vf-text vf-text--heading-r&quot;&gt;Blog&lt;/span&gt;
&lt;/header&gt;
```

The span needs to be a grey colour instead of the default black so we add a mix class to it. Instead of including the elements and relying on the parent class (`.vf-page-header`) to alter the styling, writing our HTML like this:

```html
&lt;header class=&quot;vf-page-header&quot;&gt;
  &lt;h1 class=&quot;vf-text vf-text--heading-l&quot;&gt;Strategy &amp;amp Communications&lt;/h1&gt;
  &lt;span class=&quot;vf-text vf-text--heading-r&quot;&gt;Blog&lt;/span&gt;
&lt;/header&gt;
```

We add component specific mix classes to the `h1` and `span` to be able to style them:
```html
&lt;header class=&quot;vf-page-header&quot;&gt;
  &lt;h1 class=&quot;vf-page-header__heading | vf-text vf-text--heading-l&quot;&gt;Strategy &amp;amp Communications&lt;/h1&gt;
  &lt;span class=&quot;vf-page-header__sub-heading  | vf-text vf-text--heading-r&quot;&gt;Blog&lt;/span&gt;
&lt;/header&gt;
```

#### Notes

It is good practice when creating a component to include a mix for any child element used. All mix classes should be written in the parents `.scss` file. So for the `vf-page-header` example we would write the required CSS in that component&#39;s `.scss` file rather than in the `vf-text.scss` file.

---

### Containers

A Container is a horizontal slice of a page that contains Blocks and Elements. A Container is named after its purpose rather than an abstract concept.

```html
&lt;div class=&quot;vf-intro&quot;&gt;
  &lt;h1 class=&quot;vf-intro__heading | vf-text--heading vf-text--heading-xl&quot;&gt;Cancer&lt;/h1&gt;
  &lt;p class=&quot;vf-lede | vf-text--heading vf-text--heading-l&quot;&gt;Cancer is a generic term for lots of different diseases in which cells divide many more times than usual. This abnormal growth can affect many cell types in almost any part of the body.&lt;/p&gt;
  &lt;p class=&quot;vf-intro__text | vf-text--body vf-text--body-r&quot;&gt;Cancer is a multi-stage process. Normal cells begin to divide abnormally, spreading beyond their normal boundaries, and abnormal tissue growth causes swellings called tumours to form. Tumours can be benign ‚Äì with no harmful effect on the body ‚Äì or malignant, invading healthy tissue and interfering with normal bodily functions.&lt;/p&gt;
  &lt;p class=&quot;vf-intro__text | vf-text--body vf-text--body-r&quot;&gt;There are more than 100 types of cancer and symptoms vary depending on the type. &lt;a href=&quot;javascript:Void(0);&quot;&gt;Read more about Cancer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
```

## How to write your Sass

A core principle of the Visual Framework is simple integration into workflows. Accordingly, we use Sass in this project but keep it close to CSS structure so that it&#39;s easily understandable.

### Nesting

Sass allows [Nesting](http://www.sitepoint.com/sass-reference/selector-nesting/) of CSS. This is a very nice feature but can be over used and abused. To stop this getting out of hand you should only nest media queries, pseudo classes and where referencing the parent makes sense (things like .vf-no-js and modernizr classes).

For example, in Sass:

```
a {
  text-decoration: none;
  &amp;:hover {
    text-decoration: underline;
  }
  @media (min-width: 800px) {
    font-weight: 700;
  }
  .vf-no-js &amp; {
    color: blue;
  }
}
```

And the compiled CSS:

```css
a {
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}
@media (min-width: 800px) {
  a {
    font-weight: 700;
  }
}
.vf-no-js a {
  color: blue;
}
```

### Variables

[Variables](http://www.sitepoint.com/sass-reference/variables/) in Sass allow you to reuse things like font stacks, colors and margins etc. Within the UI Pattern Library there is a file within the `global` folder called `_variables.scss` where these are defined.

If you find yourself repeating a declaration in your CSS a few times it may be worth adding a new variable for this. Try to be as abstract as you can when naming it. For example rather than write `$tab-navigation-padding: 10px;` and `$tab-card-padding: 10px;` consider writing `$tab-padding` or `$padding-small;` so that it can be used elsewhere without confusion.

### Mixins

By default there are only a limited amount of mixins in the UI Pattern Library. They are more to make writing code easier than doing anything fancy. If you take a look at the `_mixin.scss` file that&#39;s in the `global` folder in the `scss` folder there is a mixin that will make writing media queries, responsive typography and placeholders&#39;s easier when using a component. As this UI Pattern Library can make it&#39;s way into various aspects of the company mixins should be kept to a minimum so that it is easy to understand what they do.

### Working on a project

When you&#39;re working on a project you may need to make notes for things to get back to, or things that are&#39;t done and could change. You should use Sass comments for this.

If you have written some code that needs something fixed or added to then add a comment prefixed with `@todo`. Something like this:

```
// @todo fix height issue
```

If you have written some code that may change as it maybe something that gets pushed back into the patter library or something that may change by design use `@maychange`. It would look something like this:

```
// @maychange this shade of blue may change in next design overhaul
```

Your code editor can help you find these when mopping up before a project goes live.
</content>
  </entry>
  
  <entry>
    <title>Governance of the Visual Framework</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/guidelines/governance/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/guidelines/governance/</id>
    <content type="html">
The Visual Framework 2.0 is an open source project meant for the wider life
science community, so the maintainers aim to be transparent about what goes in
`vf-core`, what doesn&#39;t and why decisions are made.

The guiding spirit of the Visual Framework can be summed up as:

&gt; Instead of a quick way to implement one look and feel,
&gt; the Visual Framework is a way to quickly implement the look
&gt; and feel needed for your content, data, users and organisation.

[More background here](https://blogs.embl.org/communications/2018/09/12/faster-scientific-websites-through-reusability/).

## What goes in

Code committed to `vf-core` should meet these measures:

1. Not lock you into a particular brand look and feel
2. Be useful to many organisations
3. Be mindful of constraints and use cases common for life science content and data
4. Be compatible with a variety of frontend solutions
5. Be modular and extensible

## Where ideas are proposed and discussed

Ideas are typically [discussed on chat](https://discord.gg/XHAvkUX)
and [GitHub issues](https://github.com/visual-framework/vf-core/issues) and decisions
are documented there.


## What&#39;s in decision

We aim to capture:

- What was agreed
- Why it was agreed
- Forever-hold-your-peace

## Who makes the decision

In spirit, &quot;the community&quot; but in practice that falls to the maintainers and
those asking for change.

Who are the maintainers? Currently (as of April 2019) it&#39;s limited to EMBL and
EMBL-EBI developers, but we aim to expand this into a consultative group after
`beta.1` in late spring/summer 2019.

## The decision process

At a high level it [follows a flow like this diagram](https://coggle.it/diagram/V0hkiP976OIbGpy8/t/vanilla-pattern).
</content>
  </entry>
  
  <entry>
    <title>JavaScript guidelines</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/guidelines/javascript/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/guidelines/javascript/</id>
    <content type="html">
## Just enough JavaScript

The Visual Framework isn&#39;t intended as a general-purpose JavaScript solution, however we know it is helpful that a minimal amount of basic functionality is supported.

All components are provided as functional solutions, so where JavaScript is required (such as [tabs](https://github.com/visual-framework/vf-core/tree/develop/components/vf-tabs)) there is a fully functional set of JavaScript bundled and available in:

- [`vf-tabs.js`](https://github.com/visual-framework/vf-core/blob/develop/components/vf-tabs/vf-tabs.js) and
- [`scripts.js`](https://github.com/visual-framework/vf-core/blob/gh-pages/scripts/scripts.js)

## An opt-in philosophy

But we know many users would prefer to use their own JavaScript tooling for all -- or some -- components on a case-by-case basis.

Why? As [Adobe&#39;s Spectrum CSS puts it](https://github.com/adobe/spectrum-css#where-is-the-javascript):

&gt; We have found that JavaScript is where a framework or library quickly becomes opinionated and stops being easy to use with or across other frameworks. To avoid this problem, Spectrum CSS avoids implementation details that require JavaScript.

Likewise we don&#39;t require the use of the Visual Framework JavaScript, instead the behviour can be optionally invoke per-component with JavaScript data selectors.

So to activate the Visual Framework JavaScript for `vf-tabs` we add `data-vf-js-tabs` and `data-vf-js-tabs-content`, like so:

```html
&lt;div class=&quot;vf-tabs&quot;&gt;
  &lt;ul class=&quot;vf-tabs__list&quot; data-vf-js-tabs=&quot;&quot;&gt;
    &lt;li class=&quot;vf-tabs__item&quot;&gt;
      &lt;a class=&quot;vf-tabs__link&quot; href=&quot;#vf-tabs__section--10&quot;&gt;Second tab set&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&quot;vf-tabs__item&quot;&gt;
      &lt;a class=&quot;vf-tabs__link&quot; href=&quot;#vf-tabs__section--11&quot;&gt;Tab&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;vf-tabs-content&quot; data-vf-js-tabs-content=&quot;&quot;&gt;
  &lt;section class=&quot;vf-tabs__section&quot; id=&quot;vf-tabs__section--10&quot;&gt;
    &lt;h2&gt;Section 10&lt;/h2&gt;
  &lt;/section&gt;
  &lt;section class=&quot;vf-tabs__section&quot; id=&quot;vf-tabs__section--11&quot;&gt;
    &lt;h2&gt;Section 11&lt;/h2&gt;
  &lt;/section&gt;
&lt;/div&gt;
```

Leaving these data selectors off will cause `vf-tabs.js` to simply ignore the tabs.

### Naming

The name of your selector should follow your component&#39;s name, plus an additional `-js-` prefix.

So:
- `vf-tabs` = `data-vf-js-tabs`
- `vf-messages` = `data-vf-js-messages`
- `mycompany-modal` = `data-mycompany-js-modal`
</content>
  </entry>
  
  <entry>
    <title>User base and needs</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/guidelines/user-base/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/guidelines/user-base/</id>
    <content type="html">
The Visual Framework core (&#39;vf-core&#39;) is not intended for direct consumption into
websites, rather it&#39;s a component library that should be installed as an npm and
Sass dependency to build design systems.

## Common needs

For all supported audiences, we work to address shared needs:

1. Reusable, structured CSS and JS
1. CSS and JS that runs with and alongside other major tools (Foundation, Bootstrap and from the JS side Angular, React)
1. A component library
1. Sane defaults for new websites
1. Make a &quot;look and feel&quot; more consistent
1. Provide versioned upgrades
1. Easily add your own patterns, tweak existing patterns
1. No fixed look (doesn&#39;t have to look like any specific organisation, such as EMBL)

## Audience types

Our target audience sits in three layers:

1. Maintainers of design systems for life science websites &lt;span class=&quot;vf-badge vf-badge--tertiary&quot;&gt;Primary&lt;/span&gt;
    - needs:
       - create a design system that utilises the `vf-core`
       - add a vf-core component to an existing vf-core compatible system
    - primary interface:
       - npm
       - online docs
1. Lower-level developers
    - needs: build a design system for orgs that work with life science info
    - primary interface:
         - docs
         - code
         - command line utils
1. Those curious/learning/evaluating the Visual Framework
    - needs: understand what vf-core is
    - primary interface:
      - the static site
      - [vf-welcome site](https://github.com/visual-framework/vf-welcome)
      - examples of organisations using `vf-core`

What&#39;s not above: people building a site using generic VF-core CSS, JS and HTML
components. That&#39;s currently not a use-case we encourage or see the need for beyond
as a demonstrative design system.
</content>
  </entry>
  
  <entry>
    <title>Versioning of vf-core</title>
    <link href="https://visual-framework.github.io/vf-welcome/documentation/guidelines/versioning/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/documentation/guidelines/versioning/</id>
    <content type="html">
## How we version vf-core and its components

The versioning of components is self-contained and distinct from the version number of `vf-core`

Example: if `vf-component`@`2.2.0` has a breaking change, it would be updated to
`vf-component`@`3.0.0`. That new version number does not affect compatibility with with `vf-core`@`2.x`.

&lt;span class=&quot;vf-badge vf-badge--tertiary&quot;&gt;Related&lt;/span&gt; [Notes on component versioning](/vf-welcome/documentation/components/2-updating-a-component).


### Versioning explained

As not all users of the Visual Framework will be able to update to the very latest and we do not wish to hold others back, we are using a [semantic versioning](https://semver.org/) style of releases.

| Major release | Minor release | Note |
| ------------- | ------------- | ---- |
| (Branch)      | (Tag)         | |
| 2.0           | v2.0.0        | Initial release evolving from Compliance theme |
| &quot;             | v2.0.1        | Tagged patch release |
| &quot;             | v2.0.2        | Tagged patch release |
| &quot;             | v2.0.3        | Tagged patch release |
| 2.1           | v2.1.0        | Minor release with possible breaking changes |
| &quot;             | v2.1.1        | Tagged patch release |
| 2.2           | v2.2.0        | Minor release with possible breaking changes |
| 3.0           | v3.0.0        | Major release with many breaking changes|

We support the last two minor releases with bug fixes and branding. New features will only be added to the current and development versions.

Where&#39;s version 1.x, you ask? That&#39;s the [EMBL-EBI specific Visual Framework](https://github.com/ebiwd/EBI-Framework) from where this concept [originated, and evolved](https://blogs.embl.org/communications/2018/09/12/faster-scientific-websites-through-reusability/).

### Test releases

Testing releases will be identified in their tag, a la: `v2.0-alpha.1`, where `-alpha.1` is the tag. `-alpha`, `-beta` and `-rc` are tag suffixes.
</content>
  </entry>
  
  <entry>
    <title>I&#39;m an update</title>
    <link href="https://visual-framework.github.io/vf-welcome/posts/sample-post/"/>
    <updated>2019-04-09T12:24:50+00:00</updated>
    <id>https://visual-framework.github.io/vf-welcome/posts/sample-post/</id>
    <content type="html">&lt;p&gt;I&#39;m some content.&lt;/p&gt;
</content>
  </entry>
</feed>
